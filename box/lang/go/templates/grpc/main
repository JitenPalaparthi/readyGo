// Author : readyGo "JitenP@Outlook.Com"
// This code is generated by readyGo. You are free to make amendments as and where required
package main

import (
	"net"
	"os"
	"{{$.config.Project}}/database"
	"{{$.config.Project}}/handlers"
	{{- if eq $.config.MessagingSpec.Name "nats" }}
	"{{$.config.Project}}/messaging"
	{{- end}}
	pb "{{$.config.Project}}/protos"
	"github.com/golang/glog"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

var (
	// DBConnection is to store database connection information
	DBConnection =  "{{ $.config.DatabaseSpec.ConnectionString }}"
	// DBName is to store database name
	DBName       =  "{{ $.config.DatabaseSpec.DBName }}"
	{{- if eq $.config.MessagingSpec.Name "nats" }}
	//MessageBrokerConnection is to connect to the message broker
	MessageBrokerConnection = "{{$.config.MessagingSpec.ConnectionString}}" 
	{{- end}}
)

func main() {
glog.Info("Application {{$.config.Project}} has started")
    if os.Getenv("DB_CONNECTION") != "" {
		DBConnection = os.Getenv("DB_CONNECTION")
	}
	if os.Getenv("DB_NAME") != "" {
		DBName = os.Getenv("DB_NAME")
	}
	{{- if eq $.config.MessagingSpec.Name "nats" }}
    if os.Getenv("MB_CONNECTION")!=""{
		MessageBrokerConnection=os.Getenv("MB_CONNECTION")
	}
	{{- end}}
session, err := database.GetConnection(DBConnection, DBName)
	//defer session.Disconnect(context.TODO())

	if err != nil {
		glog.Fatal("{{$.config.DatabaseSpec.Name}} database is not connected", err)
	}
		{{- if $.config.MessagingSpec.Name }}
	message, err := messaging.GetConnection(MessageBrokerConnection)
	if err != nil {
		glog.Fatal("message broker is not connected", err)
	}
	message.Init()
	defer message.Disconnect()
	{{- end}}
	
	lis, err := net.Listen("tcp", ":{{$.config.APISpec.Port}}")
	if err != nil {
		glog.Fatalf("failed to listen: %v", err)
	}
	server := grpc.NewServer()

	 {{- range $.config.Models }}
	 {{- if eq .Type "main" }}
     {{.Name | ToLower}} := new(handlers.{{.Name}})
	 {{.Name | ToLower}}.I{{.Name}} = &database.{{.Name}}DB{DB: session}
	 {{- if .MessagingModelSpec.MessageRespondType}}
	 {{.Name | ToLower}}.Messaging = message
	 {{- end}}
	 //{{.Name | ToLower}}pb.Register{{.Name}}Server(server, {{.Name | ToLower}})	
	 pb.Register{{.Name}}Server(server, {{.Name | ToLower}})	
     {{- end}}
	 // Register reflection service on gRPC server.
	 {{- end}}
	reflection.Register(server)
	if err := server.Serve(lis); err != nil {
		glog.Fatalf("failed to serve: %v", err)
	}
}