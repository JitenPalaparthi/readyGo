// Package models is a package that contains all models
// Author : readyGo "JitenP@Outlook.Com"
// This code is generated by readyGo. You are free to make amendments as and where required
package models
{{- $validation := ""}}
{{- range .Model.Fields}}
{{- if .ValidateExp }}
{{- $validation = "true"}}
{{- end}}
{{- end}}
import (
	{{- if eq $validation "true" }}
	"errors"
	"regexp"
	{{- end}}
	{{- if eq $.config.DatabaseSpec.Name "mongo" }}
	{{- if eq .Model.Type "main"}}
	"go.mongodb.org/mongo-driver/bson/primitive"
	{{- end}}
	{{- end}}
	"bytes"
	"encoding/gob"
)
// {{ .Model.Name }} type contains all releated fields
	type {{ .Model.Name }} struct {
	{{- range .Model.Fields }}
	{{ .Name }} {{ if eq .Category "scalar"}}{{ .Type | GoType}}{{else}}{{.Type}}{{- end}} `json:"{{.Name | ToLower}}"  {{ if eq $.config.DatabaseSpec.Name "mongo" }}{{ if eq .Name "ID"}}bson:"_id,omitempty" mapstructure:"_id"{{else}}bson:"{{.Name | ToLower}}"{{- end}}{{- end}}`
	{{- end}}
	}
{{ $ModelName := .Model.Name }}
// Validate{{.Model.Name}} is to validate {{.Model.Name}} data. The Validation is based on regex
func Validate{{.Model.Name}}({{.Model.Name | Initial}} *{{.Model.Name}})(err error){
{{- range .Model.Fields}}
{{- if .ValidateExp }}
var rx{{.Name}}=regexp.MustCompile("{{.ValidateExp}}")
if !rx{{.Name}}.MatchString({{$ModelName | Initial}}.{{.Name}}) {
	return errors.New("invalid value for given field: {{.Name}}")
}	
{{- end}}
{{- end}}
	return nil
}

// BytesTo{{.Model.Name}} is to convert given bytes to the {{.Model.Name}} object.
func BytesTo{{.Model.Name}}(b []byte) (*{{.Model.Name}}, error) {
	t := &{{.Model.Name}}{}
	dec := gob.NewDecoder(bytes.NewReader(b))
	err := dec.Decode(t)
	if err != nil {
		return nil, err
	}
	return t, nil
}