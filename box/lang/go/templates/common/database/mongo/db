// Package database contains all database related methods
// Author : readyGo "JitenP@Outlook.Com"
// This code is generated by readyGo. You are free to make amendments as and where required
package database

import (
	"context"
	"errors"
	"{{.Project}}/helper"
	"{{.Project}}/models"
	"time"

	"github.com/mitchellh/mapstructure"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// {{.Model.Name}}DB is to maintain database related methods
type {{.Model.Name}}DB struct {
	DB *Database
}

{{- $modelName:=.Model.Name}}
{{- range .Model.Fields}}
{{- if eq .IsKey true }}
// Is{{$modelName}}ExistsBy{{.Name}} is to check whether provided value already existed in the database or not
func ({{$modelName | Initial}} *{{$modelName}}DB) Is{{$modelName}}ExistsBy{{.Name}}({{.Name | ToLower}} {{.Type}}) bool {
	if {{.Name | ToLower}} == "" {
		return false
	}
	filter := make(map[string]interface{}, 0)
	filter["{{.Name | ToLower}}"] = {{.Name | ToLower}}
	count, err := {{$modelName | Initial}}.DB.GetCount("{{$modelName | ToLower}}s", filter)
	if err != nil {
		if err.Error() == "not found" {
			return false
		}
	}
	if count > 0 {
		return true
	}
	return false
}
{{- end}}
{{- end}}

// Create{{.Model.Name}} is to insert a record in to the database. 
func ({{.Model.Name | Initial}} *{{.Model.Name}}DB) Create{{.Model.Name}}({{.Model.Name | ToLower}} *models.{{.Model.Name}}) (result string, err error) {
		{{- $modelName:=.Model.Name}}
		{{- range .Model.Fields}}
		{{- if eq .IsKey true }}
		if {{$modelName | Initial}}.Is{{$modelName}}ExistsBy{{.Name}}({{$modelName | ToLower}}.{{.Name}}) {
		return "",errors.New("the given {{$modelName}} already existed")
		}
		{{- end}}
		{{- end}}
		data, err := helper.ToMap({{.Model.Name | ToLower}}, "bson", "_id,omitempty")
		if err != nil {
			return "", err
		}
		result, err = {{.Model.Name | Initial}}.DB.InsertRecord("{{.Model.Name | ToLower}}s", data)
		if err != nil {
			return "", err
		}
	return result, nil
}

// Update{{.Model.Name}}ByID is to update a record in the database.The first param is to identify the record and the second is the list of the fields to update
func ({{.Model.Name | Initial}} *{{.Model.Name}}DB) Update{{.Model.Name}}ByID(id string, data map[string]interface{}) (result string, err error) {
	result, err = {{.Model.Name | Initial}}.DB.UpdateRecordByID("{{.Model.Name | ToLower}}s", id, data)
	if err != nil {
		return "", err
	}
	return result, nil
}

// Delete{{.Model.Name}}ByID is to hard delete a record from the database provided by id
func ({{.Model.Name | Initial}} *{{.Model.Name}}DB) Delete{{.Model.Name}}ByID(id string) (result string, err error) {
	result, err = {{.Model.Name | Initial}}.DB.DeleteRecordByID("{{.Model.Name | ToLower}}s", id)
	if err != nil {
		return "", err
	}
	return result, nil
}

// Get{{.Model.Name}}ByID is to fetch a record from database provided by id
func ({{.Model.Name | Initial}} *{{.Model.Name}}DB) Get{{.Model.Name}}ByID(id string) (*models.{{.Model.Name}}, error) {
	{{.Model.Name | ToLower}} := &models.{{.Model.Name}}{}
	mapData, err := {{.Model.Name | Initial}}.DB.FindRecordByID("{{.Model.Name | ToLower}}s",id)
	if err != nil {
		return nil, err
	}
	if err := mapstructure.Decode(mapData, &{{.Model.Name | ToLower}}); err != nil {
		return nil, err
	}
	return {{.Model.Name | ToLower}}, nil
}

// GetAll{{.Model.Name}}s fetches all records from a table. skip and limit params are used to fetch specific number of records. selector is a additional param to fetch based on
func ({{.Model.Name | Initial}} *{{.Model.Name}}DB) GetAll{{.Model.Name}}s(skip int64, limit int64, selector interface{}) ([]models.{{.Model.Name}}, error) {
	if _, ok := selector.(map[string]interface{}); !ok {
		return nil, errors.New("invalid input type")
	}
	var result []models.{{.Model.Name}}
	colleection := {{.Model.Name | Initial}}.DB.Client.(*mongo.Client).Database({{.Model.Name | Initial}}.DB.Name).Collection("{{.Model.Name | ToLower}}s")
	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)
	findOptions := options.Find()
	findOptions.SetLimit(limit).SetSkip(skip)
	cur, err := colleection.Find(ctx, selector, findOptions)
	if err != nil {
		return nil, err
	}
	result = make([]models.{{.Model.Name}}, 0)
	defer cur.Close(ctx)
	for cur.Next(ctx) {
		iresult := models.{{.Model.Name}}{}
		err := cur.Decode(&iresult)
		if err != nil {
			return nil, err
		}
		result = append(result, iresult)
		// do something with result....
	}
	if err := cur.Err(); err != nil {
		return nil, err
	}
	return result, nil
}
// GetAll{{.Model.Name}}sBy fetches all records from a table. skip and limit params are used to fetch specific number of records.key and value are addition params to fetch based on a key with a value
func ({{.Model.Name | Initial}} *{{.Model.Name}}DB) GetAll{{.Model.Name}}sBy(key string, value interface{}, skip int64, limit int64) ([]models.{{.Model.Name}}, error) {
	if key == "" {
		return nil, errors.New("invalid input type")
	}

	if value == nil {
		return nil, errors.New("invalid input type")
	}

	selector := make(map[string]interface{})

	var result []models.{{.Model.Name}}
	colleection := {{.Model.Name | Initial}}.DB.Client.(*mongo.Client).Database({{.Model.Name | Initial}}.DB.Name).Collection("{{.Model.Name | ToLower}}s")
	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)
	findOptions := options.Find()
	findOptions.SetLimit(limit).SetSkip(skip)

	selector[key] = value

	cur, err := colleection.Find(ctx, selector, findOptions)
	if err != nil {
		return nil, err
	}
	result = make([]models.{{.Model.Name}}, 0)
	defer cur.Close(ctx)
	for cur.Next(ctx) {
		iresult := models.{{.Model.Name}}{}
		err := cur.Decode(&iresult)
		if err != nil {
			return nil, err
		}
		result = append(result, iresult)
		// do something with result....
	}
	if err := cur.Err(); err != nil {
		return nil, err
	}

	return result, nil
}
