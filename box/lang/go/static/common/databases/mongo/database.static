// Package database contains all database related methods
// Author : readyGo "JitenP@Outlook.Com"
// This code is generated by readyGo. You are free to make amendments as and where required
package database

import (
	
	"context"
	"errors"
	"strconv"
	"time"

	"github.com/golang/glog"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"go.mongodb.org/mongo-driver/mongo/readpref"
)

const (
	// ConnectionMaxRetries is used to define maximum number or retries to connect to the database
	ConnectionMaxRetries        int8 = 10
	// ConnectionMaxRetryDuration is used to define maximum retry duration for each retry
	ConnectionMaxRetryDuration      = time.Second * 5
)

var (
	// ErrInvalidDatabaseClient is to define database error
	ErrInvalidDatabaseClient = errors.New("invalid database client.Either it is null or no data")
)

// Database type contains database related information and respective db methods
type Database struct {
	Client interface{}
	Name   string
}

// GetConnection is to get the connection from the database
func GetConnection(connString, dbName string) (*Database, error) {
	var retries int8 = 0
try:
	retries++
	client, err := mongo.NewClient(options.Client().ApplyURI(connString))
	if err != nil {
		time.Sleep(ConnectionMaxRetryDuration)
		goto try
	}
	ctx, _ := context.WithTimeout(context.Background(), 10*time.Second)
	err = client.Connect(ctx)
	if err != nil {
		time.Sleep(ConnectionMaxRetryDuration)
		goto try
	}
	//defer client.Disconnect(ctx)
	err = client.Ping(ctx, readpref.Primary())
	if err != nil {
		if retries < ConnectionMaxRetries {
			time.Sleep(ConnectionMaxRetryDuration)
			glog.Info("Trying to connect to mongodb.trying for the ", retries, " time")
			goto try
		}
		return nil, err
	}
	//defer connection.Close()
	return &Database{Client: client, Name: dbName}, nil
}

// Disconnect is to dicsonnect database connections and all
func (d *Database) Disconnect(ctx context.Context) {
	if d != nil {
		d.Client.(*mongo.Client).Disconnect(ctx)
	}
}

// InsertRecord is to insert a record
func (d *Database) InsertRecord(col string, data interface{}) (string, error) {
	if d.Client == nil {
		return "", ErrInvalidDatabaseClient
	}
	collection := d.Client.(*mongo.Client).Database(d.Name).Collection(col)

	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)
	res, err := collection.InsertOne(ctx, data)
	if err != nil {
		return "", err
	}

	id := res.InsertedID.(primitive.ObjectID).Hex()
	return id, nil

}

// UpdateRecordByID is to update a record based on the id provided
func (d *Database) UpdateRecordByID(col, id string, data interface{}) (string, error) {
	if d.Client == nil {
		return "", ErrInvalidDatabaseClient
	}
	collection := d.Client.(*mongo.Client).Database(d.Name).Collection(col)
	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)

	if id == "" {
		return "", errors.New("parameter id is empty")
	}
	objID, err := primitive.ObjectIDFromHex(id)

	if err != nil {
		return "", err
	}
	filters := primitive.M{
		"_id": objID,
	}

	update := primitive.M{
		"$set": data,
	}

	res, err := collection.UpdateOne(ctx, filters, update)
	if err != nil {
		return "", err
	}
	count := strconv.FormatInt(res.ModifiedCount, 10)
	return count, nil
}

// UpdateRecord is to update a record based on the filters provided
func (d *Database) UpdateRecord(col string, filter, data interface{}) (string, error) {
	if d.Client == nil {
		return "", ErrInvalidDatabaseClient
	}
	collection := d.Client.(*mongo.Client).Database(d.Name).Collection(col)
	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)

	update := primitive.M{
		"$set": data,
	}

	res, err := collection.UpdateOne(ctx, filter, update)
	if err != nil {
		return "", err
	}
	count := strconv.FormatInt(res.ModifiedCount, 10)
	return count, nil
}

// DeleteRecordByID is to delete a record based on the id provided
func (d *Database) DeleteRecordByID(col, id string) (string, error) {
	if d.Client == nil {
		return "", ErrInvalidDatabaseClient
	}
	collection := d.Client.(*mongo.Client).Database(d.Name).Collection(col)
	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)

	if id == "" {
		return "", errors.New("parameter id is empty")
	}
	objID, err := primitive.ObjectIDFromHex(id)

	if err != nil {
		return "", err
	}
	filters := primitive.M{
		"_id": objID,
	}

	res, err := collection.DeleteOne(ctx, filters)
	if err != nil {
		return "", err
	}

	count := strconv.FormatInt(res.DeletedCount, 10)
	return count, nil
}

// DeleteRecord is to delete a record based on the filters provided
func (d *Database) DeleteRecord(col string, filter interface{}) (string, error) {
	if d.Client == nil {
		return "", ErrInvalidDatabaseClient
	}
	collection := d.Client.(*mongo.Client).Database(d.Name).Collection(col)
	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)

	res, err := collection.DeleteOne(ctx, filter)
	if err != nil {
		return "", err
	}
	count := strconv.FormatInt(res.DeletedCount, 10)

	return count, nil
}

// DeleteRecords is to delete a records based on the filters provided
func (d *Database) DeleteRecords(col string, filter interface{}) (string, error) {
	if d.Client == nil {
		return "", ErrInvalidDatabaseClient
	}
	collection := d.Client.(*mongo.Client).Database(d.Name).Collection(col)
	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)

	res, err := collection.DeleteMany(ctx, filter)
	if err != nil {
		return "", err
	}
	count := strconv.FormatInt(res.DeletedCount, 10)
	return count, nil
}

// FindRecord is to find a record based on the filters provided
func (d *Database) FindRecord(col string, filter interface{}) (interface{}, error) {
	if d.Client == nil {
		return nil, ErrInvalidDatabaseClient
	}
	collection := d.Client.(*mongo.Client).Database(d.Name).Collection(col)
	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)

	result := make(map[string]interface{})
	res := collection.FindOne(ctx, filter)

	err := res.Decode(result)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindRecordByID is to find a record based on the id provided
func (d *Database) FindRecordByID(col, id string) (interface{}, error) {
	if d.Client == nil {
		return -1, ErrInvalidDatabaseClient
	}
	collection := d.Client.(*mongo.Client).Database(d.Name).Collection(col)
	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)

	if id == "" {
		return -1, errors.New("parameter id is empty")
	}
	objID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
			return -1, err
	}
	filters := primitive.M{
		"_id": objID,
	}

	result := make(map[string]interface{})
	res := collection.FindOne(ctx, filters)
	err = res.Decode(result)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindRecords is to find a records based on the filters provided
func (d *Database) FindRecords(col string, filter interface{}) (interface{}, error) {
	if d.Client == nil {
		return -1, ErrInvalidDatabaseClient
	}
	collection := d.Client.(*mongo.Client).Database(d.Name).Collection(col)
	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)

	cur, err := collection.Find(ctx, filter)

	if err != nil {
		return nil, err
	}
	result := make([]interface{}, 0)

	defer cur.Close(ctx)
	for cur.Next(ctx) {
		iresult := make(map[string]interface{})
		//var result primitive.M
		err := cur.Decode(&iresult)
		if err != nil {
			return nil, err
		}
		result = append(result, iresult)
		// do something with result....
	}
	if err := cur.Err(); err != nil {
		return nil, err
	}

	return result, nil
}

// FindRecordsByPaging is to find a records based on the filters provided for paging as well
func (d *Database) FindRecordsByPaging(col string, skip, limit int64, filter interface{}) (interface{}, error) {
	if d.Client == nil {
		return -1, ErrInvalidDatabaseClient
	}
	collection := d.Client.(*mongo.Client).Database(d.Name).Collection(col)
	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)

	findOptions := options.Find()
	findOptions.SetLimit(limit).SetSkip(skip)

	cur, err := collection.Find(ctx, filter, findOptions)

	if err != nil {
		return nil, err
	}
	result := make([]interface{}, 0)

	defer cur.Close(ctx)
	for cur.Next(ctx) {
		iresult := make(map[string]interface{})
		err := cur.Decode(&iresult)
		if err != nil {
			return nil, err
		}
		result = append(result, iresult)
		// do something with result....
	}
	if err := cur.Err(); err != nil {
		return nil, err
	}

	return result, nil
}

// GetCount is to get the document count based on a filter
func (d *Database) GetCount(col string, filter interface{}) (int64, error) {
	if d.Client == nil {
		return -1, ErrInvalidDatabaseClient
	}
	collection := d.Client.(*mongo.Client).Database(d.Name).Collection(col)

	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)

	return collection.CountDocuments(ctx, filter)

}

// CreateTextIndex is to create an text based index for a collection
func (d *Database) CreateTextIndex(col string, field string) error {
	view := d.Client.(*mongo.Client).Database(d.Name).Collection(col).Indexes()
	cur, err := view.List(context.TODO())
	defer cur.Close(context.TODO())
	for cur.Next(context.TODO()) {
		v := cur.Current.Lookup("key")
		if string(v.Value) == "text" {
			return nil
		}
	}
	mod := mongo.IndexModel{
		Keys: primitive.M{
			field: "text",
		}, Options: nil,
	}
	d.Client.(*mongo.Client).Database(d.Name).Collection(col).Indexes().CreateOne(context.TODO(), mod)
	return err
}